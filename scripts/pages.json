[{"name":"abstract val getState: GetState<State>","description":"org.reduxkotlin.TypedStore.getState","location":"redux-kotlin/org.reduxkotlin/-typed-store/get-state.html","searchKeys":["getState","abstract val getState: GetState<State>","org.reduxkotlin.TypedStore.getState"]},{"name":"abstract val replaceReducer: (TypedReducer<State, Action>) -> Unit","description":"org.reduxkotlin.TypedStore.replaceReducer","location":"redux-kotlin/org.reduxkotlin/-typed-store/replace-reducer.html","searchKeys":["replaceReducer","abstract val replaceReducer: (TypedReducer<State, Action>) -> Unit","org.reduxkotlin.TypedStore.replaceReducer"]},{"name":"abstract val store: Store<State>","description":"org.reduxkotlin.TypedStore.store","location":"redux-kotlin/org.reduxkotlin/-typed-store/store.html","searchKeys":["store","abstract val store: Store<State>","org.reduxkotlin.TypedStore.store"]},{"name":"abstract val subscribe: (StoreSubscriber) -> StoreSubscription","description":"org.reduxkotlin.TypedStore.subscribe","location":"redux-kotlin/org.reduxkotlin/-typed-store/subscribe.html","searchKeys":["subscribe","abstract val subscribe: (StoreSubscriber) -> StoreSubscription","org.reduxkotlin.TypedStore.subscribe"]},{"name":"abstract var dispatch: TypedDispatcher<Action>","description":"org.reduxkotlin.TypedStore.dispatch","location":"redux-kotlin/org.reduxkotlin/-typed-store/dispatch.html","searchKeys":["dispatch","abstract var dispatch: TypedDispatcher<Action>","org.reduxkotlin.TypedStore.dispatch"]},{"name":"expect fun getThreadName(): String","description":"org.reduxkotlin.utils.getThreadName","location":"redux-kotlin/org.reduxkotlin.utils/get-thread-name.html","searchKeys":["getThreadName","expect fun getThreadName(): String","org.reduxkotlin.utils.getThreadName"]},{"name":"fun <State> applyMiddleware(vararg middlewares: Middleware<State>): StoreEnhancer<State>","description":"org.reduxkotlin.applyMiddleware","location":"redux-kotlin/org.reduxkotlin/apply-middleware.html","searchKeys":["applyMiddleware","fun <State> applyMiddleware(vararg middlewares: Middleware<State>): StoreEnhancer<State>","org.reduxkotlin.applyMiddleware"]},{"name":"fun <State> combineReducers(vararg reducers: Reducer<State>): Reducer<State>","description":"org.reduxkotlin.combineReducers","location":"redux-kotlin/org.reduxkotlin/combine-reducers.html","searchKeys":["combineReducers","fun <State> combineReducers(vararg reducers: Reducer<State>): Reducer<State>","org.reduxkotlin.combineReducers"]},{"name":"fun <State> createSameThreadEnforcedStore(reducer: Reducer<State>, preloadedState: State, enhancer: StoreEnhancer<State>? = null): Store<State>","description":"org.reduxkotlin.createSameThreadEnforcedStore","location":"redux-kotlin/org.reduxkotlin/create-same-thread-enforced-store.html","searchKeys":["createSameThreadEnforcedStore","fun <State> createSameThreadEnforcedStore(reducer: Reducer<State>, preloadedState: State, enhancer: StoreEnhancer<State>? = null): Store<State>","org.reduxkotlin.createSameThreadEnforcedStore"]},{"name":"fun <State> createStore(reducer: Reducer<State>, preloadedState: State, enhancer: StoreEnhancer<State>? = null): Store<State>","description":"org.reduxkotlin.createStore","location":"redux-kotlin/org.reduxkotlin/create-store.html","searchKeys":["createStore","fun <State> createStore(reducer: Reducer<State>, preloadedState: State, enhancer: StoreEnhancer<State>? = null): Store<State>","org.reduxkotlin.createStore"]},{"name":"fun <State> middleware(dispatch: (Store<State>, Dispatcher, action: Any) -> Any): Middleware<State>","description":"org.reduxkotlin.middleware","location":"redux-kotlin/org.reduxkotlin/middleware.html","searchKeys":["middleware","fun <State> middleware(dispatch: (Store<State>, Dispatcher, action: Any) -> Any): Middleware<State>","org.reduxkotlin.middleware"]},{"name":"fun <T> compose(functions: List<(T) -> T>): (T) -> T","description":"org.reduxkotlin.compose","location":"redux-kotlin/org.reduxkotlin/compose.html","searchKeys":["compose","fun <T> compose(functions: List<(T) -> T>): (T) -> T","org.reduxkotlin.compose"]},{"name":"fun <T> compose(vararg functions: (T) -> T): (T) -> T","description":"org.reduxkotlin.compose","location":"redux-kotlin/org.reduxkotlin/compose.html","searchKeys":["compose","fun <T> compose(vararg functions: (T) -> T): (T) -> T","org.reduxkotlin.compose"]},{"name":"fun stripCoroutineName(threadName: String): String","description":"org.reduxkotlin.utils.stripCoroutineName","location":"redux-kotlin/org.reduxkotlin.utils/strip-coroutine-name.html","searchKeys":["stripCoroutineName","fun stripCoroutineName(threadName: String): String","org.reduxkotlin.utils.stripCoroutineName"]},{"name":"inline fun <State, Action : Any> Store<State>.asTyped(): TypedStore<State, Action>","description":"org.reduxkotlin.asTyped","location":"redux-kotlin/org.reduxkotlin/as-typed.html","searchKeys":["asTyped","inline fun <State, Action : Any> Store<State>.asTyped(): TypedStore<State, Action>","org.reduxkotlin.asTyped"]},{"name":"inline fun <State, Action : Any> createTypedSameThreadEnforcedStore(crossinline reducer: TypedReducer<State, Action>, preloadedState: State, noinline enhancer: StoreEnhancer<State>? = null): TypedStore<State, Action>","description":"org.reduxkotlin.createTypedSameThreadEnforcedStore","location":"redux-kotlin/org.reduxkotlin/create-typed-same-thread-enforced-store.html","searchKeys":["createTypedSameThreadEnforcedStore","inline fun <State, Action : Any> createTypedSameThreadEnforcedStore(crossinline reducer: TypedReducer<State, Action>, preloadedState: State, noinline enhancer: StoreEnhancer<State>? = null): TypedStore<State, Action>","org.reduxkotlin.createTypedSameThreadEnforcedStore"]},{"name":"inline fun <State, Action : Any> createTypedStore(crossinline reducer: TypedReducer<State, Action>, preloadedState: State, noinline enhancer: StoreEnhancer<State>? = null): TypedStore<State, Action>","description":"org.reduxkotlin.createTypedStore","location":"redux-kotlin/org.reduxkotlin/create-typed-store.html","searchKeys":["createTypedStore","inline fun <State, Action : Any> createTypedStore(crossinline reducer: TypedReducer<State, Action>, preloadedState: State, noinline enhancer: StoreEnhancer<State>? = null): TypedStore<State, Action>","org.reduxkotlin.createTypedStore"]},{"name":"inline fun <State, Action> typedReducer(crossinline reducer: TypedReducer<State, Action>): Reducer<State>","description":"org.reduxkotlin.typedReducer","location":"redux-kotlin/org.reduxkotlin/typed-reducer.html","searchKeys":["typedReducer","inline fun <State, Action> typedReducer(crossinline reducer: TypedReducer<State, Action>): Reducer<State>","org.reduxkotlin.typedReducer"]},{"name":"inline fun <TState, TAction> reducerForActionType(crossinline reducer: TypedReducer<TState, TAction>): Reducer<TState>","description":"org.reduxkotlin.reducerForActionType","location":"redux-kotlin/org.reduxkotlin/reducer-for-action-type.html","searchKeys":["reducerForActionType","inline fun <TState, TAction> reducerForActionType(crossinline reducer: TypedReducer<TState, TAction>): Reducer<TState>","org.reduxkotlin.reducerForActionType"]},{"name":"interface TypedStore<State, Action>","description":"org.reduxkotlin.TypedStore","location":"redux-kotlin/org.reduxkotlin/-typed-store/index.html","searchKeys":["TypedStore","interface TypedStore<State, Action>","org.reduxkotlin.TypedStore"]},{"name":"open val state: State","description":"org.reduxkotlin.TypedStore.state","location":"redux-kotlin/org.reduxkotlin/-typed-store/state.html","searchKeys":["state","open val state: State","org.reduxkotlin.TypedStore.state"]},{"name":"operator fun <State> Reducer<State>.plus(other: Reducer<State>): Reducer<State>","description":"org.reduxkotlin.plus","location":"redux-kotlin/org.reduxkotlin/plus.html","searchKeys":["plus","operator fun <State> Reducer<State>.plus(other: Reducer<State>): Reducer<State>","org.reduxkotlin.plus"]},{"name":"class ThreadSafeStore<State>(val store: Store<State>) : SynchronizedObject, TypedStore<State, Any> ","description":"org.reduxkotlin.threadsafe.ThreadSafeStore","location":"redux-kotlin-threadsafe/org.reduxkotlin.threadsafe/-thread-safe-store/index.html","searchKeys":["ThreadSafeStore","class ThreadSafeStore<State>(val store: Store<State>) : SynchronizedObject, TypedStore<State, Any> ","org.reduxkotlin.threadsafe.ThreadSafeStore"]},{"name":"fun <State> createSynchronizedStoreEnhancer(): StoreEnhancer<State>","description":"org.reduxkotlin.threadsafe.createSynchronizedStoreEnhancer","location":"redux-kotlin-threadsafe/org.reduxkotlin.threadsafe/create-synchronized-store-enhancer.html","searchKeys":["createSynchronizedStoreEnhancer","fun <State> createSynchronizedStoreEnhancer(): StoreEnhancer<State>","org.reduxkotlin.threadsafe.createSynchronizedStoreEnhancer"]},{"name":"fun <State> createThreadSafeStore(reducer: Reducer<State>, preloadedState: State, enhancer: StoreEnhancer<State>? = null): Store<State>","description":"org.reduxkotlin.threadsafe.createThreadSafeStore","location":"redux-kotlin-threadsafe/org.reduxkotlin.threadsafe/create-thread-safe-store.html","searchKeys":["createThreadSafeStore","fun <State> createThreadSafeStore(reducer: Reducer<State>, preloadedState: State, enhancer: StoreEnhancer<State>? = null): Store<State>","org.reduxkotlin.threadsafe.createThreadSafeStore"]},{"name":"fun <State> createThreadSafeStoreEnhancer(): StoreEnhancer<State>","description":"org.reduxkotlin.threadsafe.createThreadSafeStoreEnhancer","location":"redux-kotlin-threadsafe/org.reduxkotlin.threadsafe/create-thread-safe-store-enhancer.html","searchKeys":["createThreadSafeStoreEnhancer","fun <State> createThreadSafeStoreEnhancer(): StoreEnhancer<State>","org.reduxkotlin.threadsafe.createThreadSafeStoreEnhancer"]},{"name":"fun ThreadSafeStore(store: Store<State>)","description":"org.reduxkotlin.threadsafe.ThreadSafeStore.ThreadSafeStore","location":"redux-kotlin-threadsafe/org.reduxkotlin.threadsafe/-thread-safe-store/-thread-safe-store.html","searchKeys":["ThreadSafeStore","fun ThreadSafeStore(store: Store<State>)","org.reduxkotlin.threadsafe.ThreadSafeStore.ThreadSafeStore"]},{"name":"inline fun <State, Action : Any> createTypedThreadSafeStore(crossinline reducer: TypedReducer<State, Action>, preloadedState: State, noinline enhancer: StoreEnhancer<State>? = null): TypedStore<State, Action>","description":"org.reduxkotlin.threadsafe.createTypedThreadSafeStore","location":"redux-kotlin-threadsafe/org.reduxkotlin.threadsafe/create-typed-thread-safe-store.html","searchKeys":["createTypedThreadSafeStore","inline fun <State, Action : Any> createTypedThreadSafeStore(crossinline reducer: TypedReducer<State, Action>, preloadedState: State, noinline enhancer: StoreEnhancer<State>? = null): TypedStore<State, Action>","org.reduxkotlin.threadsafe.createTypedThreadSafeStore"]},{"name":"inline fun <State> Store<State>.asThreadSafe(): ThreadSafeStore<State>","description":"org.reduxkotlin.threadsafe.asThreadSafe","location":"redux-kotlin-threadsafe/org.reduxkotlin.threadsafe/as-thread-safe.html","searchKeys":["asThreadSafe","inline fun <State> Store<State>.asThreadSafe(): ThreadSafeStore<State>","org.reduxkotlin.threadsafe.asThreadSafe"]},{"name":"open override val getState: GetState<State>","description":"org.reduxkotlin.threadsafe.ThreadSafeStore.getState","location":"redux-kotlin-threadsafe/org.reduxkotlin.threadsafe/-thread-safe-store/get-state.html","searchKeys":["getState","open override val getState: GetState<State>","org.reduxkotlin.threadsafe.ThreadSafeStore.getState"]},{"name":"open override val replaceReducer: (Reducer<State>) -> Unit","description":"org.reduxkotlin.threadsafe.ThreadSafeStore.replaceReducer","location":"redux-kotlin-threadsafe/org.reduxkotlin.threadsafe/-thread-safe-store/replace-reducer.html","searchKeys":["replaceReducer","open override val replaceReducer: (Reducer<State>) -> Unit","org.reduxkotlin.threadsafe.ThreadSafeStore.replaceReducer"]},{"name":"open override val store: Store<State>","description":"org.reduxkotlin.threadsafe.ThreadSafeStore.store","location":"redux-kotlin-threadsafe/org.reduxkotlin.threadsafe/-thread-safe-store/store.html","searchKeys":["store","open override val store: Store<State>","org.reduxkotlin.threadsafe.ThreadSafeStore.store"]},{"name":"open override val subscribe: (StoreSubscriber) -> StoreSubscription","description":"org.reduxkotlin.threadsafe.ThreadSafeStore.subscribe","location":"redux-kotlin-threadsafe/org.reduxkotlin.threadsafe/-thread-safe-store/subscribe.html","searchKeys":["subscribe","open override val subscribe: (StoreSubscriber) -> StoreSubscription","org.reduxkotlin.threadsafe.ThreadSafeStore.subscribe"]},{"name":"open override var dispatch: Dispatcher","description":"org.reduxkotlin.threadsafe.ThreadSafeStore.dispatch","location":"redux-kotlin-threadsafe/org.reduxkotlin.threadsafe/-thread-safe-store/dispatch.html","searchKeys":["dispatch","open override var dispatch: Dispatcher","org.reduxkotlin.threadsafe.ThreadSafeStore.dispatch"]}]